name: Build & Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-test:
    name: Build and test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      # cache node modules
      - name: Cache node modules
        uses: actions/cache@v1
        id: node-modules-cache
        env:
          cache-name: node-modules-cache
        with:
          path: node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      # install dependencies
      - name: Install dependencies
        if: steps.node-modules-cache.outputs.cache-hit != 'true'
        run: npm install

      # Lint
      - name: Lint
        run: npm run lint

      # cache dist folder
      - name: Cache dist folder
        uses: actions/cache@v1
        id: dist-cache
        env:
          cache-name: dist-cache
        with:
          path: dist
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('./src') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      # Build
      - name: Build
        if: steps.dist-cache.outputs.cache-hit != 'true'
        run: npm run build

      # Archive build dist artifacts
      - name: Archive build artifacts
        uses: actions/upload-artifact@v1
        with:
          name: dist
          path: ./dist

      # cache lambda folder
      - name: Cache lambda folder
        uses: actions/cache@v1
        id: lambda-cache
        env:
          cache-name: lambda-cache
        with:
          path: lambda
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('./src') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      # Build lambda
      - name: Build lambda
        if: steps.lambda-cache.outputs.cache-hit != 'true'
        run: npm run build:lambda

      # Archive build lambda artifacts
      - name: Archive lambda artifacts
        uses: actions/upload-artifact@v1
        with:
          name: lambda
          path: ./lambda

      # sync to s3
      - name: Sync lambda to s3
        uses: jakejarvis/s3-sync-action@master
        with:
          args: --acl public-read --follow-symlinks --delete
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: 'ap-southeast-2'
          SOURCE_DIR: 'lambda'
          DEST_DIR: "tw-syncer"

      # Unit test
      - name: Unit test
        run: npm run test:unit

      # Archive coverage
      - name: Archive code coverage results
        uses: actions/upload-artifact@v1
        with:
          name: coverage
          path: coverage

      # Monitor coverage
      - name: Monitor coverage
        if: github.event_name == 'pull_request'
        uses: slavcodev/coverage-monitor-action@1.0.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          clover_file: "coverage/clover.xml"
          threshold_alert: 75
          threshold_warning: 85

      # Upload test coverage to codecov
      - name: Upload test coverage to codecov
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage/clover.xml
          flags: unittests
          name: fp-lib
          fail_ci_if_error: true

      # Test & publish code coverage to code climate
      - name: Test & publish code coverage to code climate
        uses: paambaati/codeclimate-action@v2.4.0
        env:
          CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
        with:
          coverageCommand: npm run test:unit
          debug: true

        # generate api doc
      - name: Generate API HTML doc
        run: npm run doc

      # Archive doc artifacts
      - name: Archive build artifacts
        uses: actions/upload-artifact@v1
        with:
          name: doc
          path: ./doc

      # Build github pages.
      - name: Github pages
        uses: JamesIves/github-pages-deploy-action@releases/v3
        with:
          ACCESS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH: gh-pages
          FOLDER: dist
